<!-- HW FILTERS LOADED v2 -->
<section class="container hw-filters" data-hw-filters>
  <div class="hw-filter-row">

    <!-- Preis -->
    <div class="hw-filter">
      <button class="hw-filter__btn" data-toggle="price">Preis</button>
      <div class="hw-filter__panel" data-panel="price">
        <div class="hw-price">
          <label>von</label>
          <input type="number" inputmode="decimal" min="0" step="0.01" placeholder="z. B. 3" data-min>
          <label>bis</label>
          <input type="number" inputmode="decimal" min="0" step="0.01" placeholder="z. B. 20" data-max>
        </div>
      </div>
    </div>

    <!-- Farbe (Tags) -->
    <div class="hw-filter">
      <button class="hw-filter__btn" data-toggle="color">Farbe</button>
      <div class="hw-filter__panel" data-panel="color">
        <div class="hw-list">
          {% assign colors = (section.settings.colors | default: 'Türkis, Blau, Rot, Weiß, Schwarz, Grau, Orange') | split: ',' %}
          {% for c in colors %}
            {% assign label = c | strip %}
            {% if label != '' %}
              <label class="hw-check">
                <input type="checkbox" value="{{ label | escape }}" data-color>
                <span>{{ label }}</span>
              </label>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    </div>

    <!-- Marke (Autohersteller, Tags „Marke: …“) -->
    <div class="hw-filter">
      <button class="hw-filter__btn" data-toggle="brand">Marke</button>
      <div class="hw-filter__panel" data-panel="brand">
        <div class="hw-list">
          {% assign auto_brands = (section.settings.auto_brands | default: 'Ferrari, Porsche, Lamborghini, BMW, Mercedes-Benz, Koenigsegg, Toyota, Nissan, Mazda, McLaren') | split: ',' %}
          {% for b in auto_brands %}
            {% assign label = b | strip %}
            {% if label != '' %}
              <label class="hw-check">
                <input type="checkbox" value="{{ label | escape }}" data-brand>
                <span>{{ label }}</span>
              </label>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    </div>

    <!-- Serie (Tags) -->
    <div class="hw-filter">
      <button class="hw-filter__btn" data-toggle="series">Serie</button>
      <div class="hw-filter__panel" data-panel="series">
        <div class="hw-list">
          {% assign series = (section.settings.series | default: 'Mainline, Premium, ID') | split: ',' %}
          {% for s in series %}
            {% assign label = s | strip %}
            {% if label != '' %}
              <label class="hw-check">
                <input type="checkbox" value="{{ label | escape }}" data-series>
                <span>{{ label }}</span>
              </label>
            {% endif %}
          {% endfor %}
        </div>
      </div>
    </div>

    <!-- Aktionen -->
    <div class="hw-actions">
      <button class="btn" data-apply>Filter anwenden</button>
      <button class="btn-outline" data-reset>Zurücksetzen</button>
    </div>
  </div>
</section>

<style>
.hw-filters{ padding:10px 0 18px; }
.hw-filter-row{ display:flex; flex-wrap:wrap; gap:12px; align-items:flex-start; }

/* Buttons */
.hw-filter{ position:relative; }
.hw-filter__btn{
  background:#fff !important;
  color:#0046BE !important;
  border:2px solid #0046BE !important;
  border-radius:8px !important;
  padding:8px 16px !important;
  font-weight:700 !important;
  cursor:pointer;
  transition:all .2s ease;
}
.hw-filter__btn:hover{ background:#0046BE !important; color:#fff !important; }
.hw-filter.open .hw-filter__btn{ background:#0046BE !important; color:#fff !important; }

/* Panels */
.hw-filter__panel{
  position:absolute; z-index:20; top:44px; left:0; min-width:220px;
  background:#fff; border:1px solid #e5e5e5; border-radius:12px; padding:12px;
  box-shadow:0 10px 24px rgba(0,0,0,.08); display:none;
}
.hw-filter.open .hw-filter__panel{ display:block; }
.hw-list{ display:grid; gap:8px; max-height:240px; overflow:auto; padding-right:4px; }
.hw-check{ display:flex; align-items:center; gap:8px; font-weight:700; }
.hw-check input{ width:18px; height:18px; accent-color:#0046BE; }

/* Aktionen rechts */
.hw-actions{ margin-left:auto; display:flex; gap:10px; align-items:center; }
.btn{ background:#0046BE; color:#fff; border:0; border-radius:10px; padding:8px 14px; font-weight:800; }
.btn-outline{ background:transparent; color:#0046BE; border:2px solid #0046BE; border-radius:10px; padding:8px 14px; font-weight:800; }

/* Mobile: Panel als Bottom Sheet */
@media (max-width: 720px){
  .hw-filter__panel{ position:fixed; left:12px; right:12px; top:auto; bottom:12px; }
}
</style>

<script>
(function(){
  const root = document.querySelector('[data-hw-filters]');
  if(!root) return;

  /* Präfixe (passen zu deinen Tags) */
  const PREFIX_COLOR  = "{{ section.settings.color_tag_prefix  | default: 'Farbe:' }}";
  const PREFIX_BRAND  = "{{ section.settings.brand_tag_prefix  | default: 'Marke:' }}";
  const PREFIX_SERIES = "{{ section.settings.series_tag_prefix | default: 'Serie:' }}";

  /* Toggle Panels */
  document.addEventListener('click', (e)=>{
    const btn = e.target.closest('.hw-filter__btn');
    if(btn){
      e.preventDefault();
      const wrap = btn.closest('.hw-filter');
      document.querySelectorAll('.hw-filter.open').forEach(el=>{ if(el!==wrap) el.classList.remove('open'); });
      wrap.classList.toggle('open');
      return;
    }
    if(!e.target.closest('.hw-filter') && !e.target.closest('.hw-actions')){
      document.querySelectorAll('.hw-filter.open').forEach(el=>el.classList.remove('open'));
    }
  });

  function toCents(v){ const n = Math.round(parseFloat((v||'').replace(',', '.')) * 100); return isNaN(n) ? null : n; }

  function buildUrlFromUI(){
    const url = new URL(window.location.href);
    [...url.searchParams.keys()].forEach(k => { if(k.startsWith('filter.')) url.searchParams.delete(k); });

    // Preis
    const min = root.querySelector('[data-min]')?.value;
    const max = root.querySelector('[data-max]')?.value;
    const minC = toCents(min), maxC = toCents(max);
    if(min && minC!==null) url.searchParams.set('filter.p.price.gte', String(minC));
    if(max && maxC!==null) url.searchParams.set('filter.p.price.lte', String(maxC));

    // Farbe / Marke / Serie (Tags)
    root.querySelectorAll('[data-color]:checked').forEach(chk=>{
      url.searchParams.append('filter.p.tag', `${PREFIX_COLOR} ${chk.value}`);
    });
    root.querySelectorAll('[data-brand]:checked').forEach(chk=>{
      url.searchParams.append('filter.p.tag', `${PREFIX_BRAND} ${chk.value}`);
    });
    root.querySelectorAll('[data-series]:checked').forEach(chk=>{
      url.searchParams.append('filter.p.tag', `${PREFIX_SERIES} ${chk.value}`);
    });

    return url;
  }

  function restoreFromUrl(){
    const url = new URL(window.location.href);
    const tags = url.searchParams.getAll('filter.p.tag');
    const gte  = url.searchParams.get('filter.p.price.gte');
    const lte  = url.searchParams.get('filter.p.price.lte');

    if(gte){ const v = (parseInt(gte,10)/100).toFixed(2).replace('.', ','); const i = root.querySelector('[data-min]'); if(i) i.value = v; }
    if(lte){ const v = (parseInt(lte,10)/100).toFixed(2).replace('.', ','); const i = root.querySelector('[data-max]'); if(i) i.value = v; }

    function setChecks(selector, prefix){
      root.querySelectorAll(selector).forEach(inp=>{
        const look = `${prefix} ${inp.value}`.toLowerCase();
        const hit = tags.some(t => decodeURIComponent(t).toLowerCase() === look);
        if(hit) inp.checked = true;
      });
    }
    setChecks('[data-color]',  PREFIX_COLOR);
    setChecks('[data-brand]',  PREFIX_BRAND);
    setChecks('[data-series]', PREFIX_SERIES);
  }

  root.querySelector('[data-apply]')?.addEventListener('click', (e)=>{
    e.preventDefault();
    const url = buildUrlFromUI();
    window.location.href = url.toString();
  });

  root.querySelector('[data-reset]')?.addEventListener('click', (e)=>{
    e.preventDefault();
    const url = new URL(window.location.href);
    [...url.searchParams.keys()].forEach(k => { if(k.startsWith('filter.')) url.searchParams.delete(k); });
    window.location.href = url.toString();
  });

  restoreFromUrl();
})();
</script>

{% schema %}
{
  "name": "Collection Filters (HW)",
  "settings": [
    { "type": "text", "id": "colors", "label": "Farben (kommagetrennt)", "default": "Türkis, Blau, Rot, Weiß, Schwarz, Grau, Orange" },
    { "type": "text", "id": "auto_brands", "label": "Automarken (kommagetrennt)", "default": "Ferrari, Porsche, Lamborghini, BMW, Mercedes-Benz, Koenigsegg, Toyota, Nissan, Mazda, McLaren" },
    { "type": "text", "id": "series", "label": "Serien (kommagetrennt)", "default": "Mainline, Premium, ID" },
    { "type": "text", "id": "color_tag_prefix",  "label": "Tag-Präfix Farbe", "default": "Farbe:" },
    { "type": "text", "id": "brand_tag_prefix",  "label": "Tag-Präfix Marke", "default": "Marke:" },
    { "type": "text", "id": "series_tag_prefix", "label": "Tag-Präfix Serie", "default": "Serie:" }
  ]
}
{% endschema %}
