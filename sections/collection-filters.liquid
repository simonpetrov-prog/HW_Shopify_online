<!-- DEBUG: FILTER UI online ✅ (wenn du das siehst, ist die Section aktiv) -->

<section class="container hw-filters-box" data-hw-filters>
  <div class="hw-filters-head">
    <h3>Filter</h3>
    <div class="hw-actions">
      <button class="btn" data-apply>Filter anwenden</button>
      <button class="btn-outline" data-reset>Zurücksetzen</button>
    </div>
  </div>

  <div class="hw-filter-row">

    <!-- Preis -->
    <div class="hw-filter">
      <button class="hw-filter__btn" data-toggle="price">Preis</button>
      <div class="hw-filter__panel" data-panel="price">
        <div class="hw-price">
          <label>von</label>
          <input type="number" inputmode="decimal" min="0" step="0.01" placeholder="z. B. 3" data-min>
          <label>bis</label>
          <input type="number" inputmode="decimal" min="0" step="0.01" placeholder="z. B. 20" data-max>
        </div>
      </div>
    </div>

    <!-- Farbe (ohne Liquid – nur feste Optionen) -->
    <div class="hw-filter">
      <button class="hw-filter__btn" data-toggle="color">Farbe</button>
      <div class="hw-filter__panel" data-panel="color">
        <div class="hw-list">
          <label class="hw-check"><input type="checkbox" value="Türkis" data-color><span>Türkis</span></label>
          <label class="hw-check"><input type="checkbox" value="Blau"   data-color><span>Blau</span></label>
          <label class="hw-check"><input type="checkbox" value="Rot"    data-color><span>Rot</span></label>
          <label class="hw-check"><input type="checkbox" value="Orange" data-color><span>Orange</span></label>
        </div>
      </div>
    </div>

    <!-- Marke (ohne Liquid – nur feste Optionen) -->
    <div class="hw-filter">
      <button class="hw-filter__btn" data-toggle="brand">Marke</button>
      <div class="hw-filter__panel" data-panel="brand">
        <div class="hw-list">
          <label class="hw-check"><input type="checkbox" value="Ferrari"      data-brand><span>Ferrari</span></label>
          <label class="hw-check"><input type="checkbox" value="Porsche"      data-brand><span>Porsche</span></label>
          <label class="hw-check"><input type="checkbox" value="Lamborghini"  data-brand><span>Lamborghini</span></label>
          <label class="hw-check"><input type="checkbox" value="Koenigsegg"   data-brand><span>Koenigsegg</span></label>
        </div>
      </div>
    </div>

    <!-- Serie (ohne Liquid – nur feste Optionen) -->
    <div class="hw-filter">
      <button class="hw-filter__btn" data-toggle="series">Serie</button>
      <div class="hw-filter__panel" data-panel="series">
        <div class="hw-list">
          <label class="hw-check"><input type="checkbox" value="Mainline" data-series><span>Mainline</span></label>
          <label class="hw-check"><input type="checkbox" value="Premium"  data-series><span>Premium</span></label>
          <label class="hw-check"><input type="checkbox" value="ID"       data-series><span>ID</span></label>
        </div>
      </div>
    </div>

  </div>
</section>

<style>
.hw-filters-box{ padding:14px; margin:10px 0 16px; border:2px dashed #FF6B00; border-radius:12px; background:#fff; }
.hw-filters-head{ display:flex; align-items:center; gap:12px; margin-bottom:10px; }
.hw-filters-head h3{ margin:0; font-size:18px; font-weight:800; color:#1f2937; }
.hw-actions{ margin-left:auto; display:flex; gap:10px; }
.btn{ background:#0046BE; color:#fff; border:0; border-radius:10px; padding:8px 14px; font-weight:800; }
.btn-outline{ background:transparent; color:#0046BE; border:2px solid #0046BE; border-radius:10px; padding:8px 14px; font-weight:800; }

.hw-filter-row{ display:flex; flex-wrap:wrap; gap:12px; align-items:flex-start; }
.hw-filter{ position:relative; }
.hw-filter__btn{ background:#fff; color:#0046BE; border:2px solid #0046BE; border-radius:8px; padding:8px 16px; font-weight:700; cursor:pointer; transition:.2s; }
.hw-filter__btn:hover, .hw-filter.open .hw-filter__btn{ background:#0046BE; color:#fff; }
.hw-filter__panel{ position:absolute; z-index:20; top:44px; left:0; min-width:220px; background:#fff; border:1px solid #e5e5e5; border-radius:12px; padding:12px; box-shadow:0 10px 24px rgba(0,0,0,.08); display:none; }
.hw-filter.open .hw-filter__panel{ display:block; }
.hw-list{ display:grid; gap:8px; max-height:240px; overflow:auto; padding-right:4px; }
.hw-check{ display:flex; align-items:center; gap:8px; font-weight:700; }
.hw-check input{ width:18px; height:18px; accent-color:#0046BE; }
.hw-price{ display:grid; grid-template-columns:auto 1fr auto 1fr; gap:8px; align-items:center; }
.hw-price input{ border:1px solid #e5e5e5; border-radius:10px; padding:8px 10px; }
@media (max-width: 720px){ .hw-filter__panel{ position:fixed; left:12px; right:12px; bottom:12px; top:auto; } }
</style>

<script>
(function(){
  const root = document.querySelector('[data-hw-filters]');
  if(!root) return;

  // Präfixe müssen zu deinen Produkt-Tags passen
  const PREFIX_COLOR  = "Farbe:";
  const PREFIX_BRAND  = "Marke:";
  const PREFIX_SERIES = "Serie:";

  document.addEventListener('click', (e)=>{
    const btn = e.target.closest('.hw-filter__btn');
    if(btn){
      e.preventDefault();
      const wrap = btn.closest('.hw-filter');
      document.querySelectorAll('.hw-filter.open').forEach(el=>{ if(el!==wrap) el.classList.remove('open'); });
      wrap.classList.toggle('open');
      return;
    }
    if(!e.target.closest('.hw-filter') && !e.target.closest('.hw-actions')){
      document.querySelectorAll('.hw-filter.open').forEach(el=>el.classList.remove('open'));
    }
  });

  const toCents = v => { const n = Math.round(parseFloat((v||'').replace(',', '.'))*100); return isNaN(n)?null:n; };

  function buildUrlFromUI(){
    const url = new URL(window.location.href);
    [...url.searchParams.keys()].forEach(k => { if(k.startsWith('filter.')) url.searchParams.delete(k); });

    const min = root.querySelector('[data-min]')?.value;
    const max = root.querySelector('[data-max]')?.value;
    const minC = toCents(min), maxC = toCents(max);
    if(min && minC!==null) url.searchParams.set('filter.p.price.gte', String(minC));
    if(max && maxC!==null) url.searchParams.set('filter.p.price.lte', String(maxC));

    root.querySelectorAll('[data-color]:checked').forEach(chk=>{
      url.searchParams.append('filter.p.tag', `${PREFIX_COLOR} ${chk.value}`);
    });
    root.querySelectorAll('[data-brand]:checked').forEach(chk=>{
      url.searchParams.append('filter.p.tag', `${PREFIX_BRAND} ${chk.value}`);
    });
    root.querySelectorAll('[data-series]:checked').forEach(chk=>{
      url.searchParams.append('filter.p.tag', `${PREFIX_SERIES} ${chk.value}`);
    });

    return url;
  }

  function restoreFromUrl(){
    const url = new URL(window.location.href);
    const tags = url.searchParams.getAll('filter.p.tag');
    const gte  = url.searchParams.get('filter.p.price.gte');
    const lte  = url.searchParams.get('filter.p.price.lte');

    if(gte){ const v=(parseInt(gte,10)/100).toFixed(2).replace('.',','); const i=root.querySelector('[data-min]'); if(i) i.value=v; }
    if(lte){ const v=(parseInt(lte,10)/100).toFixed(2).replace('.',','); const i=root.querySelector('[data-max]'); if(i) i.value=v; }

    const setChecks = (selector,prefix)=>{
      root.querySelectorAll(selector).forEach(inp=>{
        const look = `${prefix} ${inp.value}`.toLowerCase();
        const hit = tags.some(t => decodeURIComponent(t).toLowerCase() === look);
        if(hit) inp.checked = true;
      });
    };
    setChecks('[data-color]',  "Farbe:");
    setChecks('[data-brand]',  "Marke:");
    setChecks('[data-series]', "Serie:");
  }

  root.querySelector('[data-apply]')?.addEventListener('click', (e)=>{
    e.preventDefault();
    window.location.href = buildUrlFromUI().toString();
  });

  root.querySelector('[data-reset]')?.addEventListener('click', (e)=>{
    e.preventDefault();
    const url = new URL(window.location.href);
    [...url.searchParams.keys()].forEach(k => { if(k.startsWith('filter.')) url.searchParams.delete(k); });
    window.location.href = url.toString();
  });

  restoreFromUrl();
})();
</script>

{% schema %}
{ "name": "Collection Filters – MINI (no Liquid lists)" }
{% endschema %}
