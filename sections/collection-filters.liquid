<script>
(function(){
  const root = document.querySelector('[data-hw-filters]');
  if(!root) return;

  /* ---- Einstellungen (Präfixe müssen zu deinen Tags passen) ---- */
  const PREFIX_COLOR  = "{{ section.settings.color_tag_prefix  | default: 'Farbe:' }}";
  const PREFIX_BRAND  = "{{ section.settings.brand_tag_prefix  | default: 'Marke:' }}";
  const PREFIX_SERIES = "{{ section.settings.series_tag_prefix | default: 'Serie:' }}";

  /* ---- Toggle Panels (lassen wir unverändert) ---- */
  document.addEventListener('click', (e)=>{
    const btn = e.target.closest('.hw-filter__btn');
    if(btn){
      e.preventDefault();
      const wrap = btn.closest('.hw-filter');
      document.querySelectorAll('.hw-filter.open').forEach(el=>{ if(el!==wrap) el.classList.remove('open'); });
      wrap.classList.toggle('open');
      return;
    }
    if(!e.target.closest('.hw-filter') && !e.target.closest('.hw-actions')){
      document.querySelectorAll('.hw-filter.open').forEach(el=>el.classList.remove('open'));
    }
  });

  /* ---- URL Builder ---- */
  function toCents(v){ const n = Math.round(parseFloat((v||'').replace(',', '.')) * 100); return isNaN(n) ? null : n; }

  function buildUrlFromUI(){
    const url = new URL(window.location.href);

    // Vorherige Filter entfernen
    [...url.searchParams.keys()].forEach(k => {
      if(k.startsWith('filter.')) url.searchParams.delete(k);
    });

    // Preis
    const min = root.querySelector('[data-min]')?.value;
    const max = root.querySelector('[data-max]')?.value;
    const minC = toCents(min), maxC = toCents(max);
    if(min && minC!==null) url.searchParams.set('filter.p.price.gte', String(minC));
    if(max && maxC!==null) url.searchParams.set('filter.p.price.lte', String(maxC));

    // Farbe (Tags)
    root.querySelectorAll('[data-color]:checked').forEach(chk=>{
      url.searchParams.append('filter.p.tag', `${PREFIX_COLOR} ${chk.value}`);
    });

    // Marke (Tags)
    root.querySelectorAll('[data-brand]:checked').forEach(chk=>{
      url.searchParams.append('filter.p.tag', `${PREFIX_BRAND} ${chk.value}`);
    });

    // Serie (Tags)
    root.querySelectorAll('[data-series]:checked').forEach(chk=>{
      url.searchParams.append('filter.p.tag', `${PREFIX_SERIES} ${chk.value}`);
    });

    return url;
  }

  /* ---- UI aus URL wiederherstellen (Persistenz) ---- */
  function restoreFromUrl(){
    const url = new URL(window.location.href);
    const tags = url.searchParams.getAll('filter.p.tag'); // mehrere erlaubt
    const gte  = url.searchParams.get('filter.p.price.gte');
    const lte  = url.searchParams.get('filter.p.price.lte');

    // Preis
    if(gte){ const v = (parseInt(gte,10)/100).toFixed(2).replace('.', ','); const input = root.querySelector('[data-min]'); if(input) input.value = v; }
    if(lte){ const v = (parseInt(lte,10)/100).toFixed(2).replace('.', ','); const input = root.querySelector('[data-max]'); if(input) input.value = v; }

    // Checkboxes setzen
    function setChecks(selector, prefix){
      const inputs = root.querySelectorAll(selector);
      inputs.forEach(inp=>{
        const lookFor = `${prefix} ${inp.value}`.toLowerCase();
        const hit = tags.some(t => decodeURIComponent(t).toLowerCase() === lookFor);
        if(hit) inp.checked = true;
      });
    }
    setChecks('[data-color]',  PREFIX_COLOR);
    setChecks('[data-brand]',  PREFIX_BRAND);
    setChecks('[data-series]', PREFIX_SERIES);

    // Buttons „active“, wenn in dem Panel etwas gesetzt ist
    function markActive(panelSelector, btnSelector, inputSelector){
      const hasAny = [...root.querySelectorAll(panelSelector + ' ' + inputSelector)].some(i => i.checked || (i.type==='number' && i.value));
      const btn = root.querySelector(btnSelector);
      if(btn && hasAny) btn.classList.add('active');
    }
    markActive('[data-panel="price"]',  '[data-toggle="price"]',  'input');
    markActive('[data-panel="color"]',  '[data-toggle="color"]',  'input[type="checkbox"]');
    markActive('[data-panel="brand"]',  '[data-toggle="brand"]',  'input[type="checkbox"]');
    markActive('[data-panel="series"]', '[data-toggle="series"]', 'input[type="checkbox"]');
  }

  /* ---- Apply / Reset ---- */
  const applyBtn = root.querySelector('[data-apply]');
  const resetBtn = root.querySelector('[data-reset]');

  applyBtn?.addEventListener('click', (e)=>{
    e.preventDefault();
    const url = buildUrlFromUI();
    window.location.href = url.toString();
  });

  resetBtn?.addEventListener('click', (e)=>{
    e.preventDefault();
    const url = new URL(window.location.href);
    [...url.searchParams.keys()].forEach(k => { if(k.startsWith('filter.')) url.searchParams.delete(k); });
    window.location.href = url.toString();
  });

  // Initial: UI aus URL füllen
  restoreFromUrl();
})();
</script>
