<section
  class="container pdp-recos"
  data-product-recommendations
  data-product-id="{{ product.id }}"
  data-limit="{{ section.settings.limit }}"
>
  <div class="pdp-recos__head">
    <h2>{{ section.settings.heading | default: 'Ähnliche Produkte' }}</h2>
    <a class="btn-outline" href="/collections/all">Alle ansehen</a>
  </div>

  {%- comment -%} Serverseitig: Wenn Shopify Empfehlungen hat, zeigen. {%- endcomment -%}
  {% if recommendations.performed and recommendations.products_count > 0 %}
    <div class="grid" data-recos-grid>
      {% for rec in recommendations.products limit: section.settings.limit %}
        {% render 'rec-card', p: rec %}
      {% endfor %}
    </div>
  {% else %}
    {%- comment -%} Fallback: Zeig ein paar andere Produkte aus "all", außer das aktuelle. {%- endcomment -%}
    {% assign col = collections['all'] %}
    {% if col.products_count > 1 %}
      <div class="grid" data-recos-grid>
        {% assign shown = 0 %}
        {% for rec in col.products %}
          {% if rec.id == product.id %}{% continue %}{% endif %}
          {% render 'rec-card', p: rec %}
          {% assign shown = shown | plus: 1 %}
          {% if shown >= section.settings.limit %}{% break %}{% endif %}
        {% endfor %}
      </div>
    {% endif %}
  {% endif %}
</section>

<style>
.pdp-recos{ padding:26px 0 40px; }
.pdp-recos__head{ display:flex; justify-content:space-between; align-items:center; gap:12px; margin-bottom:12px; }
.pdp-recos h2{ margin:0; color:var(--primary,#0046BE); }
.grid{ display:grid; gap:20px; grid-template-columns:repeat(auto-fit,minmax(220px,1fr)); }
.product{ text-align:center; border:1px solid var(--border,#e5e5e5); padding:14px; border-radius:12px; background:#fff; position:relative; transition:transform .12s, box-shadow .12s; }
.product:hover{ transform:translateY(-2px); box-shadow:0 6px 18px rgba(0,0,0,.06); }
.product img{ width:100%; height:200px; object-fit:contain; border-radius:8px; background:#fff; }
.product h3{ margin:10px 0 6px; font-size:1rem; color:var(--text,#111); }
.price{ margin:0 0 10px; }
.price .compare{ text-decoration:line-through; color:#999; margin-right:6px; }
.deal-badge{ position:absolute; left:10px; top:10px; background:var(--accent,#FF6B00); color:#fff; font-weight:700; padding:4px 8px; border-radius:999px; font-size:12px; }
.quick-add{ display:flex; justify-content:center; }
</style>

<script>
/* Clientseitig nachladen (falls Server nichts geliefert hat) */
(function(){
  const wrap = document.querySelector('[data-product-recommendations]');
  if(!wrap || wrap.dataset.loaded) return;

  const limit = wrap.dataset.limit || 4;
  const pid   = wrap.dataset.productId;
  const url   = `${window.routes?.product_recommendations_url || '/recommendations/products'}?section_id={{ section.id }}&product_id=${pid}&limit=${limit}`;

  fetch(url)
    .then(r => r.text())
    .then(html => {
      const doc = new DOMParser().parseFromString(html, 'text/html');
      const inner = doc.querySelector('[data-recommendations], [data-product-recommendations]'); // deckt beide Varianten
      if (inner) {
        const grid = inner.querySelector('[data-recos-grid]');
        if (grid) wrap.querySelector('[data-recos-grid]')?.replaceWith(grid);
        else wrap.innerHTML = inner.innerHTML;
        wrap.dataset.loaded = 'true';
      }
    })
    .catch(()=>{ /* silent */ });
})();
</script>

{% schema %}
{
  "name": "Ähnliche Produkte",
  "settings": [
    { "type": "text", "id": "heading", "label": "Überschrift", "default": "Ähnliche Produkte" },
    { "type": "range", "id": "limit", "label": "Anzahl", "min": 2, "max": 12, "step": 1, "default": 4 }
  ]
}
{% endschema %}
